#
# Sea Fighter v.1
#

"""
 app_state - Current global game state of Application

 app_state = 0 -> uninitialized
 app_state = 1 -> player one step
 app_state = 2 -> player two step
 app_state = 3 -> game over

"""

"""

Правила игры:

Игра начинается с того, что игроки задают себе имена. После ввода имен, и отправки их на сервер,
сервер присылает данные для отрисовки полей.

Эти поля отображаются в браузере, и игрокам дается по 2 минуты (на стороне браузера запускается таймер) для расстановки
кораблей. 

4 корабля - однопалубных
3 корабля - двупалубных
2 корабля - трехпалубных
1 корабль - четырехпалубный

Между кораблями должно быть расстояние не меньше чем в 1 клетку (точку координат), корабли не должны слипаться.

После размещения кораблей, данные с расположением кораблей отправляется на сервер, и сохраняется на время игры.

Игрок который начинает игру, определяется случайным образом (Math.random())

В браузере всегда висит состояние того, какой игрок сейчас ходит. После совершения хода, данные игрока отправлятся
на сервер, где проверяется следующее: 

  - положение переданных координат
    - если игрок попадает, игроку возвращается флаг успешного попадания, плюс положение координат которые он передал.
    - У игрока, в которого попали, меняетя состояние клетки на state = 0
  - Если игрок не попал
    - возвращется флаг неуспешного хода, и закрашивается клетка на его поле с предполагаемыми чужими кораблями
    
Игрок, который попал в корабль, повторяет ход дальше. Если игрок промазал, то ход переходит к следующему игроку.

Победивший считается тот, кто полностью уничтожил флотилию врага.

Максимальная длина партии - 10 минут. По истечении этого времени, игра заканчивается в принудительном порядке, и победивший считается тот,
кто подбил больше всего чужих кораблей. Если игроки подбили одинаковое количество кораблей, присуждается ничья.



"""


app_state = 0

player_one_name = 'Tatyana'
player_two_name = 'Andrew'

current_player_move = ''


def player_one_check_shot(x, y):
    print('Check coords of ' + player_one_name + ' ' + x + ' and ' + str(y))


def player_two_check_shot(x, y):
    print('Check coords of ' + player_two_name + ' ' + x + ' and ' + str(y))


def player_one_shot(x, y):
    current_player_move = player_one_name

    print(player_one_name + ' shot with coords ' + 'x ' + str(x) + ' and y ' + str(y))
    player_two_check_shot(x, y)


def player_two_shot(x, y):
    current_player_move = player_two_name

    print(player_two_name + ' shot with coords ' + 'x ' + str(x) + ' and y ' + str(y))
    player_one_check_shot(x, y)


decks = [
    {
        'x': 0,
        'y': 0,
        'state': 1,
    },
    {
        'x': 0,
        'y': 1,
        'state': 1
    }
]

boat = {
    'decks': decks,
    'boat_state': 0  # 0 -> boat destroyed, 1 -> boat alive
}

"""
Example of sea fighter battlefield

example_battle_field = [
      a) b) c) d) e) f) g) h) i) j)
   0) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   1) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   2) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   3) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   4) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   5) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   6) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   7) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   8) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   9) 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
]
"""

"""
 ДЗ для Татьяны:
 
 Продумать как будет выглядеть состояния поля для двух видов:
 
 1) Для поля со своими кораблями
 2) Для поля с чужими кораблями

"""